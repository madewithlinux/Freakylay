var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var Freakylay;
(function (Freakylay) {
    var Internal;
    (function (Internal) {
        var Helper = (function () {
            function Helper() {
            }
            Helper.element = function (selector) {
                return document.querySelector('#' + selector);
            };
            Helper.div = function () {
                return this.create('div');
            };
            Helper.create = function (tag, namespace) {
                if (namespace === void 0) { namespace = ''; }
                if (namespace === '') {
                    return document.createElement(tag);
                }
                return document.createElementNS(namespace, tag);
            };
            Helper.svg = function (tag) {
                return Helper.create(tag, this.SvgNamespace);
            };
            Helper.addClass = function (element, className) {
                if (!element.classList.contains(className)) {
                    element.classList.add(className);
                }
            };
            Helper.removeClass = function (element, className) {
                var classes = element.className.split(' ').filter(function (v) { return v !== className; });
                element.className = classes.filter((function (value, index, array) { return array.indexOf(value) === index; })).join(' ');
            };
            Helper.issetCheck = function (data, key) {
                return typeof data[key] !== 'undefined' && data[key] !== null;
            };
            Helper.isset = function (data, key, def) {
                return this.issetCheck(data, key) ? data[key] : def;
            };
            Helper.clamp = function (input, min, max) {
                return Math.min(max, Math.max(min, input));
            };
            Helper.visibility = function (element, visible) {
                element.style.visibility = visible ? 'visible' : 'hidden';
            };
            Helper.display = function (element, display, isInline) {
                if (isInline === void 0) { isInline = false; }
                element.style.display = display ? (isInline ? 'inline-block' : 'block') : 'none';
            };
            Helper.toggleClass = function (element, value, className) {
                if (value) {
                    Helper.addClass(element, className);
                }
                else {
                    Helper.removeClass(element, className);
                }
            };
            Helper.stringRepeat = function (input, length) {
                var ret = input;
                while (ret.length < length) {
                    ret += input;
                }
                return ret;
            };
            Helper.areColorsEqual = function (a, b) {
                return a.toRgb() == b.toRgb();
            };
            Helper.SvgNamespace = 'http://www.w3.org/2000/svg';
            return Helper;
        }());
        Internal.Helper = Helper;
    })(Internal = Freakylay.Internal || (Freakylay.Internal = {}));
})(Freakylay || (Freakylay = {}));
var Freakylay;
(function (Freakylay) {
    var Data;
    (function (Data) {
        var Color = (function () {
            function Color(r, g, b, a) {
                if (r === void 0) { r = 0; }
                if (g === void 0) { g = 0; }
                if (b === void 0) { b = 0; }
                if (a === void 0) { a = 255; }
                this.r = 0;
                this.g = 0;
                this.b = 0;
                this.a = 255;
                this.r = r;
                this.g = g;
                this.b = b;
                this.a = a;
            }
            Color.prototype.toRgb = function () {
                var inner = [this.r, this.g, this.b];
                if (this.a != 255) {
                    inner.push(Math.round(this.a / 255 * 100) / 100);
                    return 'rgba(' + inner.join(',') + ')';
                }
                return '#' + inner.map(function (x) {
                    var s = x.toString(16);
                    return s.length == 1 ? "0" + s : s;
                }).join('');
            };
            Color.fromUrl = function (input) {
                var tmp = [];
                if (input.substring(0, 3) === 'rgb') {
                    input = input.replace(/ /g, '');
                    var start = 5;
                    if (input.indexOf('a') == -1) {
                        start--;
                    }
                    tmp = input.substr(start, input.indexOf(')') - start).split(',').map(function (s) { return parseFloat(s); });
                    if (start == 4) {
                        tmp.push(255);
                    }
                    else {
                        tmp[3] *= 255;
                    }
                }
                else if (input.match(/[^0-9A-Fa-f]/g) === null) {
                    input = input.replace(/#/, '');
                    tmp.push(parseInt(input.substr(0, 2), 16));
                    tmp.push(parseInt(input.substr(2, 2), 16));
                    tmp.push(parseInt(input.substr(4, 2), 16));
                    if (input.length > 6) {
                        tmp.push(parseInt(input.substr(6, 2), 16));
                    }
                    else {
                        tmp.push(255);
                    }
                }
                else {
                    tmp = [0, 0, 0, 255];
                }
                return new (Color.bind.apply(Color, __spreadArray([void 0], tmp, false)))();
            };
            Color.prototype.toUrl = function () {
                var input = this.toRgb();
                if (input.substring(0, 1) === '#') {
                    return input.substring(1);
                }
                if (input.substring(0, 3) === 'rgb') {
                    return input;
                }
                return '000000';
            };
            Color.prototype.clone = function () {
                return new Color(this.r, this.g, this.b, this.a);
            };
            return Color;
        }());
        Data.Color = Color;
    })(Data = Freakylay.Data || (Freakylay.Data = {}));
})(Freakylay || (Freakylay = {}));
var Freakylay;
(function (Freakylay) {
    var Internal;
    (function (Internal) {
        var Color = Freakylay.Data.Color;
        var UrlManager = (function () {
            function UrlManager() {
                this.urlParams = new URLSearchParams(location.search);
                this.registeredParameters = [];
            }
            UrlManager.prototype.hasAnyParams = function () {
                return location.search.length > 1;
            };
            UrlManager.prototype.registerOptionParam = function (key, defaultValue) {
                var compareFn = null;
                if (defaultValue instanceof Color) {
                    compareFn = Internal.Helper.areColorsEqual;
                }
                var param = new Internal.UrlParam(this, key, defaultValue, compareFn);
                this.registeredParameters.push(param);
                return param;
            };
            UrlManager.prototype.areAllDefault = function () {
                var outcome = true;
                this.registeredParameters.forEach(function (p) {
                    if (!p.isDefaultValue()) {
                        outcome = false;
                    }
                });
                return outcome;
            };
            return UrlManager;
        }());
        Internal.UrlManager = UrlManager;
    })(Internal = Freakylay.Internal || (Freakylay.Internal = {}));
})(Freakylay || (Freakylay = {}));
var Freakylay;
(function (Freakylay) {
    var Internal;
    (function (Internal) {
        var DataKey = (function () {
            function DataKey(key, defaultValue) {
                this.key = key;
                this.value = defaultValue;
                this.defaultValue = defaultValue;
            }
            DataKey.prototype.setValue = function (value) {
                this.value = value;
            };
            DataKey.prototype.isSet = function () {
                return this.value != this.defaultValue;
            };
            DataKey.prototype.update = function (data) {
                this.setValue(Internal.Helper.isset(data, this.key, this.defaultValue));
            };
            DataKey.prototype.getValue = function () {
                return this.value;
            };
            return DataKey;
        }());
        Internal.DataKey = DataKey;
    })(Internal = Freakylay.Internal || (Freakylay.Internal = {}));
})(Freakylay || (Freakylay = {}));
var Freakylay;
(function (Freakylay) {
    var Connector;
    (function (Connector) {
        var Converters;
        (function (Converters) {
            var Web;
            (function (Web) {
                var Converter = (function () {
                    function Converter() {
                    }
                    return Converter;
                }());
                Web.Converter = Converter;
                var Version = (function () {
                    function Version(major, minor, patch) {
                        this.major = major;
                        this.minor = minor;
                        this.patch = patch;
                    }
                    Version.FromString = function (version) {
                        var splitVersion = version.split(".");
                        if (splitVersion.length < 3)
                            throw new Error("Invalid version format.");
                        return new Version(parseInt(splitVersion[0]), parseInt(splitVersion[1]), parseInt(splitVersion[2]));
                    };
                    Version.prototype.GetMajor = function () {
                        return this.major;
                    };
                    Version.prototype.GetMinor = function () {
                        return this.minor;
                    };
                    Version.prototype.GetPatch = function () {
                        return this.patch;
                    };
                    Version.prototype.ToString = function (fieldCount) {
                        if (fieldCount === void 0) { fieldCount = 3; }
                        switch (fieldCount) {
                            case 1:
                                return "".concat(this.major);
                            case 2:
                                return "".concat(this.major, ".").concat(this.minor);
                            case 3:
                                return "".concat(this.major, ".").concat(this.minor, ".").concat(this.patch);
                            default:
                                throw new Error("Invalid field count.");
                        }
                    };
                    return Version;
                }());
                Web.Version = Version;
                var AData = (function () {
                    function AData() {
                        this.UnixTimestamp = 0;
                    }
                    return AData;
                }());
                Web.AData = AData;
                var MapData = (function (_super) {
                    __extends(MapData, _super);
                    function MapData() {
                        var _this = _super !== null && _super.apply(this, arguments) || this;
                        _this.InLevel = false;
                        _this.LevelPaused = false;
                        _this.LevelFinished = false;
                        _this.LevelFailed = false;
                        _this.LevelQuit = false;
                        _this.Hash = null;
                        _this.SongName = "";
                        _this.SongSubName = "";
                        _this.SongAuthor = "";
                        _this.Mapper = "";
                        _this.BSRKey = null;
                        _this.CoverImage = null;
                        _this.Duration = 0;
                        _this.MapType = "";
                        _this.Difficulty = "";
                        _this.CustomDifficultyLabel = null;
                        _this.BPM = 0;
                        _this.NJS = 0;
                        _this.Modifiers = new Modifiers();
                        _this.ModifiersMultiplier = 1.0;
                        _this.PracticeMode = false;
                        _this.PracticeModeModifiers = new PracticeModeModifiers();
                        _this.PP = 0;
                        _this.Star = 0;
                        _this.GameVersion = "";
                        _this.PluginVersion = "";
                        _this.IsMultiplayer = false;
                        _this.PreviousRecord = 0;
                        _this.PreviousBSR = null;
                        return _this;
                    }
                    return MapData;
                }(AData));
                Web.MapData = MapData;
                var Modifiers = (function () {
                    function Modifiers() {
                        this.NoFailOn0Energy = false;
                        this.OneLife = false;
                        this.FourLives = false;
                        this.NoBombs = false;
                        this.NoWalls = false;
                        this.NoArrows = false;
                        this.GhostNotes = false;
                        this.DisappearingArrows = false;
                        this.SmallNotes = false;
                        this.ProMode = false;
                        this.StrictAngles = false;
                        this.ZenMode = false;
                        this.SlowerSong = false;
                        this.FasterSong = false;
                        this.SuperFastSong = false;
                    }
                    return Modifiers;
                }());
                Web.Modifiers = Modifiers;
                var PracticeModeModifiers = (function () {
                    function PracticeModeModifiers() {
                        this.SongSpeedMul = 1;
                        this.StartInAdvanceAndClearNotes = false;
                        this.SongStartTime = 0;
                    }
                    return PracticeModeModifiers;
                }());
                Web.PracticeModeModifiers = PracticeModeModifiers;
                var LiveData = (function (_super) {
                    __extends(LiveData, _super);
                    function LiveData() {
                        var _this = _super !== null && _super.apply(this, arguments) || this;
                        _this.Score = 0;
                        _this.ScoreWithMultipliers = 0;
                        _this.MaxScore = 0;
                        _this.MaxScoreWithMultipliers = 0;
                        _this.Rank = "SSS";
                        _this.FullCombo = true;
                        _this.NotesSpawned = 0;
                        _this.Combo = 0;
                        _this.Misses = 0;
                        _this.Accuracy = 100;
                        _this.BlockHitScore = new BlockHitScore();
                        _this.PlayerHealth = 50;
                        _this.ColorType = EColorType.None;
                        _this.TimeElapsed = 0;
                        _this.EventTrigger = EEventTrigger.Unknown;
                        return _this;
                    }
                    return LiveData;
                }(AData));
                Web.LiveData = LiveData;
                var BlockHitScore = (function () {
                    function BlockHitScore() {
                        this.PreSwing = 0;
                        this.PostSwing = 0;
                        this.CenterSwing = 0;
                    }
                    return BlockHitScore;
                }());
                Web.BlockHitScore = BlockHitScore;
                var EColorType;
                (function (EColorType) {
                    EColorType[EColorType["ColorA"] = 0] = "ColorA";
                    EColorType[EColorType["ColorB"] = 1] = "ColorB";
                    EColorType[EColorType["None"] = -1] = "None";
                })(EColorType = Web.EColorType || (Web.EColorType = {}));
                var EEventTrigger;
                (function (EEventTrigger) {
                    EEventTrigger[EEventTrigger["Unknown"] = 0] = "Unknown";
                    EEventTrigger[EEventTrigger["TimerElapsed"] = 1] = "TimerElapsed";
                    EEventTrigger[EEventTrigger["NoteMissed"] = 2] = "NoteMissed";
                    EEventTrigger[EEventTrigger["EnergyChange"] = 3] = "EnergyChange";
                    EEventTrigger[EEventTrigger["ScoreChange"] = 4] = "ScoreChange";
                })(EEventTrigger = Web.EEventTrigger || (Web.EEventTrigger = {}));
                var SampleData = (function () {
                    function SampleData() {
                    }
                    SampleData.GetMapData = function () {
                        var mapData = new MapData();
                        mapData.UnixTimestamp = 1631935482036;
                        mapData.InLevel = true;
                        mapData.LevelPaused = false;
                        mapData.LevelFinished = false;
                        mapData.LevelFailed = false;
                        mapData.LevelQuit = false;
                        mapData.Hash = "648B6FE961C398DE638FA1E614878F1194ADF92E";
                        mapData.SongName = "Tera I/O";
                        mapData.SongSubName = "[200 Step]";
                        mapData.Mapper = "cerret";
                        mapData.BSRKey = "11a27";
                        mapData.CoverImage = "https://eu.cdn.beatsaver.com/2b090f3bae36acdcff6197cddf95ff2290cfb487.jpg";
                        mapData.Duration = 336;
                        mapData.MapType = "Standard";
                        mapData.Difficulty = "ExpertPlus";
                        mapData.CustomDifficultyLabel = "Normal";
                        mapData.BPM = 200;
                        mapData.NJS = 23;
                        mapData.Modifiers = new Modifiers();
                        mapData.Modifiers.DisappearingArrows = true;
                        mapData.ModifiersMultiplier = 1;
                        mapData.PracticeMode = false;
                        mapData.PracticeModeModifiers = new PracticeModeModifiers();
                        mapData.PP = 0;
                        mapData.Star = 0;
                        mapData.GameVersion = "1.13.2";
                        mapData.PluginVersion = "2.0.12";
                        mapData.SongAuthor = "Camellia";
                        mapData.IsMultiplayer = false;
                        mapData.PreviousRecord = 2714014;
                        mapData.PreviousBSR = null;
                        return mapData;
                    };
                    SampleData.GetLiveData = function () {
                        var liveData = new LiveData();
                        liveData.UnixTimestamp = 1631935485375;
                        liveData.Score = 574728;
                        liveData.ScoreWithMultipliers = 574728;
                        liveData.MaxScore = 612835;
                        liveData.MaxScoreWithMultipliers = 612835;
                        liveData.Rank = "SS";
                        liveData.FullCombo = false;
                        liveData.NotesSpawned = 612;
                        liveData.Combo = 352;
                        liveData.Misses = 2;
                        liveData.Accuracy = 94.20143961906433;
                        liveData.BlockHitScore = new BlockHitScore();
                        liveData.BlockHitScore.PreSwing = 70;
                        liveData.BlockHitScore.PostSwing = 30;
                        liveData.BlockHitScore.CenterSwing = 14;
                        liveData.PlayerHealth = 100;
                        liveData.ColorType = EColorType.ColorA;
                        liveData.TimeElapsed = 77;
                        liveData.EventTrigger = EEventTrigger.ScoreChange;
                        return liveData;
                    };
                    return SampleData;
                }());
                Web.SampleData = SampleData;
                var Parser = (function () {
                    function Parser() {
                    }
                    Parser.GetPluginVersion = function () {
                        var _a;
                        return (_a = this.pluginVersion) !== null && _a !== void 0 ? _a : this.LATEST_KNOWN_PLUGIN_VERSION;
                    };
                    Parser.GetPluginVersionFromData = function (data) {
                        return this.GetPluginVersionFromDataObj(JSON.parse(data));
                    };
                    Parser.GetPluginVersionFromDataObj = function (data) {
                        var deserializedData = data;
                        var pluginVersionStr = null;
                        for (var _i = 0, _a = this.KNOWN_VERSION_KEYS; _i < _a.length; _i++) {
                            var key = _a[_i];
                            if (deserializedData[key] != undefined) {
                                pluginVersionStr = deserializedData[key];
                                break;
                            }
                        }
                        if (pluginVersionStr === null)
                            throw new Error("Invalid map data.");
                        return Version.FromString(pluginVersionStr);
                    };
                    Parser.ParseMapData = function (data) {
                        return __awaiter(this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                return [2, this.ParseMapDataObj(JSON.parse(data))];
                            });
                        });
                    };
                    Parser.ParseMapDataObj = function (data) {
                        return __awaiter(this, void 0, void 0, function () {
                            var deserializedData, pluginVersion, converter;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        deserializedData = data;
                                        try {
                                            pluginVersion = this.GetPluginVersionFromDataObj(deserializedData);
                                        }
                                        catch (_b) {
                                            throw new Error("Invalid MapData.");
                                        }
                                        return [4, this.LoadConverter(pluginVersion)];
                                    case 1:
                                        _a.sent();
                                        return [4, this.GetConverter(this.pluginVersion)];
                                    case 2:
                                        converter = _a.sent();
                                        return [2, converter.ConvertMapData(deserializedData)];
                                }
                            });
                        });
                    };
                    Parser.ParseLiveData = function (data) {
                        return __awaiter(this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                return [2, this.ParseLiveDataObj(JSON.parse(data))];
                            });
                        });
                    };
                    Parser.ParseLiveDataObj = function (data) {
                        var _a;
                        return __awaiter(this, void 0, void 0, function () {
                            var deserializedData, isLiveData, pluginVersion, converter;
                            return __generator(this, function (_b) {
                                switch (_b.label) {
                                    case 0:
                                        deserializedData = data;
                                        isLiveData = false;
                                        try {
                                            this.GetPluginVersionFromDataObj(deserializedData);
                                        }
                                        catch (_c) {
                                            isLiveData = true;
                                        }
                                        finally {
                                            if (!isLiveData)
                                                throw new Error("Invalid LiveData.");
                                        }
                                        pluginVersion = (_a = this.pluginVersion) !== null && _a !== void 0 ? _a : this.LATEST_KNOWN_PLUGIN_VERSION;
                                        return [4, this.LoadConverter(pluginVersion)];
                                    case 1:
                                        _b.sent();
                                        return [4, this.GetConverter(pluginVersion)];
                                    case 2:
                                        converter = _b.sent();
                                        return [2, converter.ConvertLiveData(deserializedData)];
                                }
                            });
                        });
                    };
                    Parser.LoadConverter = function (pluginVersion) {
                        return __awaiter(this, void 0, void 0, function () {
                            var pluginVersionMajorMinor, script, converter;
                            return __generator(this, function (_a) {
                                var _b;
                                switch (_a.label) {
                                    case 0:
                                        pluginVersionMajorMinor = pluginVersion.ToString(2);
                                        if (this.importedConverters.has(pluginVersionMajorMinor))
                                            return [2];
                                        return [4, (_b = "./".concat(pluginVersionMajorMinor, ".js"), Promise.resolve().then(function () { return require(_b); }))];
                                    case 1:
                                        script = _a.sent();
                                        converter = new script.Converter();
                                        this.importedConverters.set(pluginVersionMajorMinor, converter);
                                        this.pluginVersion = pluginVersion;
                                        return [2];
                                }
                            });
                        });
                    };
                    Parser.GetConverter = function (pluginVersion) {
                        return __awaiter(this, void 0, void 0, function () {
                            var majorMinorString;
                            return __generator(this, function (_a) {
                                majorMinorString = pluginVersion.ToString(2);
                                if (!this.importedConverters.has(majorMinorString))
                                    throw new Error("Converter not found.");
                                return [2, this.importedConverters.get(majorMinorString)];
                            });
                        });
                    };
                    Parser.LATEST_KNOWN_PLUGIN_VERSION = Version.FromString("2.1.0");
                    Parser.KNOWN_VERSION_KEYS = ["PluginVersion"];
                    Parser.pluginVersion = null;
                    Parser.importedConverters = new Map();
                    return Parser;
                }());
                Web.Parser = Parser;
            })(Web = Converters.Web || (Converters.Web = {}));
        })(Converters = Connector.Converters || (Connector.Converters = {}));
    })(Connector = Freakylay.Connector || (Freakylay.Connector = {}));
})(Freakylay || (Freakylay = {}));
var Freakylay;
(function (Freakylay) {
    var Connector;
    (function (Connector) {
        var Converters;
        (function (Converters) {
            var BSDP_2_0;
            (function (BSDP_2_0) {
                var WebData = Freakylay.Connector.Converters.Web;
                var Converter = (function (_super) {
                    __extends(Converter, _super);
                    function Converter() {
                        return _super !== null && _super.apply(this, arguments) || this;
                    }
                    Converter.prototype.ConvertMapData = function (data) {
                        var _a, _b, _c, _d, _e;
                        var source = data;
                        var converted = new WebData.MapData();
                        converted.InLevel = source.InLevel;
                        converted.LevelPaused = source.LevelPaused;
                        converted.LevelFinished = source.LevelFinished;
                        converted.LevelFailed = source.LevelFailed;
                        converted.LevelQuit = source.LevelQuit;
                        converted.Hash = source.Hash;
                        converted.SongName = (_a = source.SongName) !== null && _a !== void 0 ? _a : converted.SongName;
                        converted.SongSubName = (_b = source.SongSubName) !== null && _b !== void 0 ? _b : converted.SongSubName;
                        converted.SongAuthor = source.SongAuthor;
                        converted.Mapper = (_c = source.Mapper) !== null && _c !== void 0 ? _c : converted.Mapper;
                        converted.BSRKey = source.BSRKey;
                        converted.CoverImage = source.coverImage;
                        converted.Duration = source.Length;
                        converted.MapType = (_d = source.MapType) !== null && _d !== void 0 ? _d : converted.MapType;
                        converted.Difficulty = (_e = source.Difficulty) !== null && _e !== void 0 ? _e : converted.Difficulty;
                        converted.CustomDifficultyLabel = source.CustomDifficultyLabel;
                        converted.BPM = source.BPM;
                        converted.NJS = source.NJS;
                        converted.Modifiers.NoFailOn0Energy = source.Modifiers.noFailOn0Energy;
                        converted.Modifiers.OneLife = source.Modifiers.oneLife;
                        converted.Modifiers.FourLives = source.Modifiers.fourLives;
                        converted.Modifiers.NoBombs = source.Modifiers.noBombs;
                        converted.Modifiers.NoWalls = source.Modifiers.noWalls;
                        converted.Modifiers.NoArrows = source.Modifiers.noArrows;
                        converted.Modifiers.GhostNotes = source.Modifiers.ghostNotes;
                        converted.Modifiers.DisappearingArrows = source.Modifiers.disappearingArrows;
                        converted.Modifiers.SmallNotes = source.Modifiers.smallNotes;
                        converted.Modifiers.ProMode = source.Modifiers.proMode;
                        converted.Modifiers.StrictAngles = source.Modifiers.strictAngles;
                        converted.Modifiers.ZenMode = source.Modifiers.zenMode;
                        converted.Modifiers.SlowerSong = source.Modifiers.slowerSong;
                        converted.Modifiers.FasterSong = source.Modifiers.fasterSong;
                        converted.Modifiers.SuperFastSong = source.Modifiers.superFastSong;
                        converted.ModifiersMultiplier = source.ModifiersMultiplier;
                        converted.PracticeMode = source.PracticeMode;
                        converted.PracticeModeModifiers.SongSpeedMul = source.PracticeModeModifiers.songSpeedMul;
                        converted.PracticeModeModifiers.StartInAdvanceAndClearNotes = source.PracticeModeModifiers.startInAdvanceAndClearNotes == 1.0;
                        converted.PracticeModeModifiers.SongStartTime = source.PracticeModeModifiers.startSongTime;
                        converted.PP = source.PP;
                        converted.Star = source.Star;
                        converted.GameVersion = source.GameVersion;
                        converted.PluginVersion = source.PluginVersion;
                        converted.IsMultiplayer = source.IsMultiplayer;
                        converted.PreviousRecord = source.PreviousRecord;
                        converted.PreviousBSR = source.PreviousBSR;
                        converted.UnixTimestamp = source.unixTimestamp;
                        return converted;
                    };
                    Converter.prototype.ConvertLiveData = function (data) {
                        var _a;
                        var source = data;
                        var converted = new WebData.LiveData();
                        converted.Score = source.Score;
                        converted.ScoreWithMultipliers = source.ScoreWithMultipliers;
                        converted.MaxScore = source.MaxScore;
                        converted.MaxScoreWithMultipliers = source.MaxScoreWithMultipliers;
                        converted.Rank = (_a = source.Rank) !== null && _a !== void 0 ? _a : converted.Rank;
                        converted.FullCombo = source.FullCombo;
                        converted.Combo = source.Combo;
                        converted.Misses = source.Misses;
                        converted.Accuracy = source.Accuracy;
                        if (source.BlockHitScore != null) {
                            converted.BlockHitScore.PreSwing = source.BlockHitScore[0];
                            converted.BlockHitScore.PostSwing = source.BlockHitScore[1];
                            converted.BlockHitScore.CenterSwing = source.BlockHitScore[2];
                        }
                        converted.PlayerHealth = source.PlayerHealth;
                        switch (source.ColorType) {
                            case ColorType.None:
                                converted.ColorType = WebData.EColorType.None;
                                break;
                            case ColorType.ColorA:
                                converted.ColorType = WebData.EColorType.ColorA;
                                break;
                            case ColorType.ColorB:
                                converted.ColorType = WebData.EColorType.ColorB;
                                break;
                        }
                        converted.TimeElapsed = source.TimeElapsed;
                        converted.UnixTimestamp = source.unixTimestamp;
                        switch (source.EventTrigger) {
                            case LiveDataEventTriggers.TimerElapsed:
                                converted.EventTrigger = WebData.EEventTrigger.TimerElapsed;
                                break;
                            case LiveDataEventTriggers.NoteMissed:
                                converted.EventTrigger = WebData.EEventTrigger.NoteMissed;
                                break;
                            case LiveDataEventTriggers.EnergyChange:
                                converted.EventTrigger = WebData.EEventTrigger.EnergyChange;
                                break;
                            case LiveDataEventTriggers.ScoreChange:
                                converted.EventTrigger = WebData.EEventTrigger.ScoreChange;
                                break;
                        }
                        return converted;
                    };
                    return Converter;
                }(WebData.Converter));
                BSDP_2_0.Converter = Converter;
                var ColorType;
                (function (ColorType) {
                    ColorType[ColorType["ColorA"] = 0] = "ColorA";
                    ColorType[ColorType["ColorB"] = 1] = "ColorB";
                    ColorType[ColorType["None"] = -1] = "None";
                })(ColorType || (ColorType = {}));
                var LiveDataEventTriggers;
                (function (LiveDataEventTriggers) {
                    LiveDataEventTriggers[LiveDataEventTriggers["TimerElapsed"] = 0] = "TimerElapsed";
                    LiveDataEventTriggers[LiveDataEventTriggers["NoteMissed"] = 1] = "NoteMissed";
                    LiveDataEventTriggers[LiveDataEventTriggers["EnergyChange"] = 2] = "EnergyChange";
                    LiveDataEventTriggers[LiveDataEventTriggers["ScoreChange"] = 3] = "ScoreChange";
                })(LiveDataEventTriggers || (LiveDataEventTriggers = {}));
            })(BSDP_2_0 = Converters.BSDP_2_0 || (Converters.BSDP_2_0 = {}));
        })(Converters = Connector.Converters || (Connector.Converters = {}));
    })(Connector = Freakylay.Connector || (Freakylay.Connector = {}));
})(Freakylay || (Freakylay = {}));
var Freakylay;
(function (Freakylay) {
    var Connector;
    (function (Connector) {
        var Converters;
        (function (Converters) {
            var BSDP_2_1;
            (function (BSDP_2_1) {
                var WebData = Freakylay.Connector.Converters.Web;
                var Converter = (function (_super) {
                    __extends(Converter, _super);
                    function Converter() {
                        return _super !== null && _super.apply(this, arguments) || this;
                    }
                    Converter.prototype.ConvertMapData = function (data) {
                        var source = data;
                        var converted = new WebData.MapData();
                        converted.UnixTimestamp = source.UnixTimestamp;
                        converted.InLevel = source.InLevel;
                        converted.LevelPaused = source.LevelPaused;
                        converted.LevelFinished = source.LevelFinished;
                        converted.LevelFailed = source.LevelFailed;
                        converted.LevelQuit = source.LevelQuit;
                        converted.Hash = source.Hash;
                        converted.SongName = source.SongName;
                        converted.SongSubName = source.SongSubName;
                        converted.SongAuthor = source.SongAuthor;
                        converted.Mapper = source.Mapper;
                        converted.BSRKey = source.BSRKey;
                        converted.CoverImage = source.CoverImage;
                        converted.Duration = source.Duration;
                        converted.MapType = source.MapType;
                        converted.Difficulty = source.Difficulty;
                        converted.CustomDifficultyLabel = source.CustomDifficultyLabel;
                        converted.BPM = source.BPM;
                        converted.NJS = source.NJS;
                        converted.Modifiers = source.Modifiers;
                        converted.ModifiersMultiplier = source.ModifiersMultiplier;
                        converted.PracticeMode = source.PracticeMode;
                        converted.PracticeModeModifiers.SongSpeedMul = source.PracticeModeModifiers.SongSpeedMul;
                        converted.PracticeModeModifiers.StartInAdvanceAndClearNotes = source.PracticeModeModifiers.StartInAdvanceAndClearNotes;
                        converted.PracticeModeModifiers.SongStartTime = source.PracticeModeModifiers.SongStartTime;
                        converted.PP = source.PP;
                        converted.Star = source.Star;
                        converted.GameVersion = source.GameVersion;
                        converted.PluginVersion = source.PluginVersion;
                        converted.IsMultiplayer = source.IsMultiplayer;
                        converted.PreviousRecord = source.PreviousRecord;
                        converted.PreviousBSR = source.PreviousBSR;
                        return converted;
                    };
                    Converter.prototype.ConvertLiveData = function (data) {
                        var source = data;
                        var converted = new WebData.LiveData();
                        converted.UnixTimestamp = source.UnixTimestamp;
                        converted.Score = source.Score;
                        converted.ScoreWithMultipliers = source.ScoreWithMultipliers;
                        converted.MaxScore = source.MaxScore;
                        converted.MaxScoreWithMultipliers = source.MaxScoreWithMultipliers;
                        converted.Rank = source.Rank;
                        converted.FullCombo = source.FullCombo;
                        converted.NotesSpawned = source.NotesSpawned;
                        converted.Combo = source.Combo;
                        converted.Misses = source.Misses;
                        converted.Accuracy = source.Accuracy;
                        converted.BlockHitScore = source.BlockHitScore;
                        converted.PlayerHealth = source.PlayerHealth;
                        converted.ColorType = source.ColorType;
                        converted.TimeElapsed = source.TimeElapsed;
                        converted.EventTrigger = source.EventTrigger;
                        return converted;
                    };
                    return Converter;
                }(WebData.Converter));
                BSDP_2_1.Converter = Converter;
                var EColorType;
                (function (EColorType) {
                    EColorType[EColorType["ColorA"] = 0] = "ColorA";
                    EColorType[EColorType["ColorB"] = 1] = "ColorB";
                    EColorType[EColorType["None"] = -1] = "None";
                })(EColorType || (EColorType = {}));
                var EEventTrigger;
                (function (EEventTrigger) {
                    EEventTrigger[EEventTrigger["Unknown"] = 0] = "Unknown";
                    EEventTrigger[EEventTrigger["TimerElapsed"] = 1] = "TimerElapsed";
                    EEventTrigger[EEventTrigger["NoteMissed"] = 2] = "NoteMissed";
                    EEventTrigger[EEventTrigger["EnergyChange"] = 3] = "EnergyChange";
                    EEventTrigger[EEventTrigger["ScoreChange"] = 4] = "ScoreChange";
                })(EEventTrigger || (EEventTrigger = {}));
            })(BSDP_2_1 = Converters.BSDP_2_1 || (Converters.BSDP_2_1 = {}));
        })(Converters = Connector.Converters || (Connector.Converters = {}));
    })(Connector = Freakylay.Connector || (Freakylay.Connector = {}));
})(Freakylay || (Freakylay = {}));
var Freakylay;
(function (Freakylay) {
    var Connector;
    (function (Connector) {
        var WebData = Freakylay.Connector.Converters.Web;
        var Converter_BSDP_2_0 = Freakylay.Connector.Converters.BSDP_2_0.Converter;
        var Converter_BSDP_2_1 = Freakylay.Connector.Converters.BSDP_2_1.Converter;
        Connector.CBlockHitScore = WebData.BlockHitScore;
        Connector.CPracticeModeModifiers = WebData.PracticeModeModifiers;
        Connector.CModifiers = WebData.Modifiers;
        Connector.CMapData = WebData.MapData;
        Connector.CLiveData = WebData.LiveData;
        var DataConverter = (function () {
            function DataConverter() {
                var params = new URLSearchParams(location.search);
                this.dataConverterName = params.get('dataConverterName') || 'default';
                switch (this.dataConverterName) {
                    case 'default':
                    case 'BSDP_2_1':
                        this.dataConverterImpl = new Converter_BSDP_2_1();
                        break;
                    case 'BSDP_2_0':
                        this.dataConverterImpl = new Converter_BSDP_2_0();
                        break;
                    default:
                        console.error('unrecognized data converter name', this.dataConverterName, 'defaulting to BSDP_2_1');
                        this.dataConverterImpl = new Converter_BSDP_2_1();
                        break;
                }
            }
            DataConverter.prototype.convertMapData = function (data) {
                return this.dataConverterImpl.ConvertMapData(data);
            };
            DataConverter.prototype.convertLiveData = function (data) {
                return this.dataConverterImpl.ConvertLiveData(data);
            };
            return DataConverter;
        }());
        Connector.DataConverter = DataConverter;
    })(Connector = Freakylay.Connector || (Freakylay.Connector = {}));
})(Freakylay || (Freakylay = {}));
var Freakylay;
(function (Freakylay) {
    var Data;
    (function (Data) {
        var DataKey = Freakylay.Internal.DataKey;
        var Helper = Freakylay.Internal.Helper;
        var DataConverter = Freakylay.Connector.DataConverter;
        function mapDataKey(key, defaultValue) {
            return new DataKey(key, defaultValue);
        }
        var MapData = (function () {
            function MapData() {
                this.dataConverter = new DataConverter();
                this.GameVersion = mapDataKey('GameVersion', '1.13.2');
                this.PluginVersion = mapDataKey('PluginVersion', '2.0.0.0');
                this.InLevel = mapDataKey('InLevel', false);
                this.LevelPaused = mapDataKey('LevelPaused', false);
                this.LevelFinished = mapDataKey('LevelFinished', false);
                this.LevelFailed = mapDataKey('LevelFailed', false);
                this.LevelQuit = mapDataKey('LevelQuit', false);
                this.Hash = mapDataKey('Hash', '');
                this.SongName = mapDataKey('SongName', '');
                this.SongSubName = mapDataKey('SongSubName', '');
                this.SongAuthor = mapDataKey('SongAuthor', '');
                this.Mapper = mapDataKey('Mapper', '');
                this.BSRKey = mapDataKey('BSRKey', 'BSRKey');
                this.CoverImage = mapDataKey('CoverImage', 'img/BS_Logo.jpg');
                this.Length = mapDataKey('Duration', 60);
                this.TimeScale = new DataKey('TimeScale', 0);
                this.MapType = mapDataKey('MapType', 'Standard');
                this.Difficulty = mapDataKey('Difficulty', 'ExpertPlus');
                this.CustomDifficultyLabel = mapDataKey('CustomDifficultyLabel', '');
                this.BPM = mapDataKey('BPM', 0);
                this.NJS = mapDataKey('NJS', 0);
                this.ModifiersMultiplier = mapDataKey('ModifiersMultiplier', 1);
                this.PracticeMode = mapDataKey('PracticeMode', false);
                this.PP = mapDataKey('PP', 0);
                this.Star = mapDataKey('Star', 0);
                this.IsMultiplayer = mapDataKey('IsMultiplayer', false);
                this.PreviousRecord = mapDataKey('PreviousRecord', 0);
                this.PreviousBSR = mapDataKey('PreviousBSR', '');
                this.Modifiers = new Data.Modifiers();
                this.PracticeModeModifiers = new Data.PracticeModeModifiers();
            }
            MapData.prototype.update = function (data) {
                if (data && Object.keys(data).length > 0) {
                    data = this.dataConverter.convertMapData(data);
                }
                this.GameVersion.update(data);
                this.PluginVersion.update(data);
                this.InLevel.update(data);
                this.LevelPaused.update(data);
                this.LevelFinished.update(data);
                this.LevelFailed.update(data);
                this.LevelQuit.update(data);
                this.Hash.update(data);
                this.SongName.update(data);
                this.SongSubName.update(data);
                this.SongAuthor.update(data);
                this.Mapper.update(data);
                this.BSRKey.update(data);
                this.CoverImage.update(data);
                this.Length.update(data);
                this.TimeScale.update(data);
                this.MapType.update(data);
                this.Difficulty.update(data);
                this.CustomDifficultyLabel.update(data);
                this.BPM.update(data);
                this.NJS.update(data);
                this.ModifiersMultiplier.update(data);
                this.PracticeMode.update(data);
                this.PP.update(data);
                this.Star.update(data);
                this.IsMultiplayer.update(data);
                this.PreviousRecord.update(data);
                this.PreviousBSR.update(data);
                this.Modifiers.update(Helper.isset(data, 'Modifiers', {}));
                this.PracticeModeModifiers.update(Helper.isset(data, 'PracticeModeModifiers', {}));
            };
            MapData.prototype.getDifficultyString = function () {
                var diff = this.Difficulty.getValue();
                return diff == 'ExpertPlus' ? 'Expert+' : diff;
            };
            MapData.prototype.getFullDifficultyLabel = function (hideDefaultDifficulty) {
                var normalDifficultyString = this.getDifficultyString();
                var custom = this.CustomDifficultyLabel.getValue();
                if (hideDefaultDifficulty) {
                    return custom.length > 0 ? custom : normalDifficultyString;
                }
                if (custom === '' || custom === normalDifficultyString) {
                    return normalDifficultyString;
                }
                else {
                    return custom + ' - ' + normalDifficultyString;
                }
            };
            MapData.prototype.getSongAuthorLine = function () {
                var name = this.SongAuthor.getValue();
                if (this.SongSubName.getValue().length > 0) {
                    name += ' - ' + this.SongSubName.getValue();
                }
                return name;
            };
            return MapData;
        }());
        Data.MapData = MapData;
    })(Data = Freakylay.Data || (Freakylay.Data = {}));
})(Freakylay || (Freakylay = {}));
var Freakylay;
(function (Freakylay) {
    var Data;
    (function (Data) {
        var DataKey = Freakylay.Internal.DataKey;
        var DataConverter = Freakylay.Connector.DataConverter;
        function liveDataKey(key, defaultValue) {
            return new DataKey(key, defaultValue);
        }
        var LiveData = (function () {
            function LiveData() {
                this.dataConverter = new DataConverter();
                this.Score = liveDataKey('Score', 0);
                this.ScoreWithMultipliers = liveDataKey('ScoreWithMultipliers', 0);
                this.MaxScore = liveDataKey('MaxScore', 0);
                this.MaxScoreWithMultipliers = liveDataKey('MaxScoreWithMultipliers', 0);
                this.Rank = liveDataKey('Rank', '');
                this.FullCombo = liveDataKey('FullCombo', false);
                this.Combo = liveDataKey('Combo', 0);
                this.Misses = liveDataKey('Misses', 0);
                this.Accuracy = liveDataKey('Accuracy', 0);
                this.BlockHitScores = liveDataKey('BlockHitScore', { PreSwing: 0, PostSwing: 0, CenterSwing: 0 });
                this.PlayerHealth = liveDataKey('PlayerHealth', 0);
                this.TimeElapsed = liveDataKey('TimeElapsed', 0);
            }
            LiveData.prototype.update = function (data) {
                if (data && Object.keys(data).length > 0) {
                    data = this.dataConverter.convertLiveData(data);
                }
                this.Score.update(data);
                this.ScoreWithMultipliers.update(data);
                this.MaxScore.update(data);
                this.MaxScoreWithMultipliers.update(data);
                this.Rank.update(data);
                this.FullCombo.update(data);
                this.Combo.update(data);
                this.Misses.update(data);
                this.Accuracy.update(data);
                this.BlockHitScores.update(data);
                this.PlayerHealth.update(data);
                this.TimeElapsed.update(data);
            };
            return LiveData;
        }());
        Data.LiveData = LiveData;
    })(Data = Freakylay.Data || (Freakylay.Data = {}));
})(Freakylay || (Freakylay = {}));
var Freakylay;
(function (Freakylay) {
    var Data;
    (function (Data) {
        var Helper = Freakylay.Internal.Helper;
        var Pulsoid = (function () {
            function Pulsoid() {
                this.url = '';
            }
            Pulsoid.prototype.setUrl = function (url) {
                this.url = url.trim().replace(/ /g, '');
                if (this.url == '') {
                    this.sendEvent(0);
                    return;
                }
                this.pulsoidData();
            };
            Pulsoid.prototype.getUrl = function () {
                return this.url;
            };
            Pulsoid.prototype.start = function () {
                var _this = this;
                this.lastCheck = new Date();
                window.setInterval(function () {
                    _this.pulsoidData();
                }, 1000);
            };
            Pulsoid.prototype.isInitialized = function () {
                return this.url.length > 0;
            };
            Pulsoid.prototype.sendEvent = function (bpm) {
                window.dispatchEvent(new CustomEvent(Pulsoid.EVENT, { detail: this.isInitialized() ? bpm : 0 }));
            };
            Pulsoid.prototype.pulsoidData = function () {
                var _this = this;
                if (!this.isInitialized()) {
                    return;
                }
                var request = new XMLHttpRequest();
                request.onreadystatechange = function () {
                    if (request.readyState != 4) {
                        return;
                    }
                    var data = JSON.parse(request.responseText);
                    var measured = new Date(Helper.isset(data, 'measured_at', (new Date()).toString()));
                    var bpm = parseInt(Helper.isset(data, 'bpm', '0'));
                    if (measured >= _this.lastCheck) {
                        _this.sendEvent(bpm);
                        _this.lastCheck = measured;
                    }
                };
                request.open('GET', 'http://u.unskilledfreak.zone/overlay/freakylay/pulsoid.php?pFeed=' + this.url, true);
                request.setRequestHeader('Accept', 'application/json');
                request.send(null);
            };
            Pulsoid.EVENT = 'pulsoid';
            return Pulsoid;
        }());
        Data.Pulsoid = Pulsoid;
    })(Data = Freakylay.Data || (Freakylay.Data = {}));
})(Freakylay || (Freakylay = {}));
var Freakylay;
(function (Freakylay) {
    var UiElement;
    (function (UiElement) {
        var Helper = Freakylay.Internal.Helper;
        var Marquee = (function () {
            function Marquee(element) {
                this.animationSpeed = 250;
                this.element = element;
                this.internalTimer = null;
                this.width = 0;
            }
            Marquee.prototype.setValue = function (val) {
                var _this = this;
                this.stop();
                this.element.innerHTML = val;
                var styles = window.getComputedStyle(this.element, null);
                var width = parseInt(styles.getPropertyValue('width'));
                if (width > 400) {
                    this.element.innerHTML += Helper.stringRepeat(' ', 10);
                    this.internalTimer = window.setInterval(function () {
                        var actualVal = _this.element.innerHTML;
                        var first = actualVal.substr(0, 1);
                        _this.element.innerHTML = actualVal.substr(1) + first;
                    }, this.animationSpeed);
                }
            };
            Marquee.prototype.stop = function () {
                window.clearInterval(this.internalTimer);
            };
            return Marquee;
        }());
        UiElement.Marquee = Marquee;
    })(UiElement = Freakylay.UiElement || (Freakylay.UiElement = {}));
})(Freakylay || (Freakylay = {}));
var Freakylay;
(function (Freakylay) {
    var UiElement;
    (function (UiElement) {
        var Helper = Freakylay.Internal.Helper;
        var CircleBar = (function () {
            function CircleBar(parentElement, textCallback, size, padding) {
                if (size === void 0) { size = 90; }
                if (padding === void 0) { padding = 10; }
                this.parent = parentElement;
                this.callback = textCallback;
                var half = size / 2;
                var radius = half - padding;
                this.circumference = radius * Math.PI * 2;
                this.text = Helper.div();
                this.bar = CircleBar.getCircle(half, radius);
                this.bar.style.strokeDasharray = this.circumference + 'px , ' + this.circumference + 'px';
                var svg = Helper.svg('svg');
                svg.style.width = size + 'px';
                svg.style.height = size + 'px';
                var remaining = CircleBar.getCircle(half, radius);
                Helper.addClass(remaining, 'remaining');
                Helper.addClass(this.bar, 'progress');
                Helper.addClass(svg, 'roundBar');
                Helper.addClass(this.text, 'progressInfo');
                svg.append(remaining, this.bar);
                this.parent.append(this.text, svg);
            }
            CircleBar.prototype.setProgress = function (current, total) {
                var progress = current / total;
                this.bar.style.strokeDashoffset = this.getCircumference(progress);
                if (typeof this.callback === 'function') {
                    this.setText(this.callback((Math.round(progress * 10000) / 100).toFixed(2)));
                }
            };
            CircleBar.prototype.setText = function (text) {
                this.text.innerHTML = text;
            };
            CircleBar.prototype.getCircumference = function (input) {
                return Helper.clamp((1 - input) * this.circumference, 0, this.circumference) + 'px';
            };
            CircleBar.getCircle = function (size, radius) {
                var c = Helper.svg('circle');
                c.cx.baseVal.value = size;
                c.cy.baseVal.value = size;
                c.r.baseVal.value = radius;
                return c;
            };
            return CircleBar;
        }());
        UiElement.CircleBar = CircleBar;
    })(UiElement = Freakylay.UiElement || (Freakylay.UiElement = {}));
})(Freakylay || (Freakylay = {}));
var Freakylay;
(function (Freakylay) {
    var UiElement;
    (function (UiElement) {
        var Helper = Freakylay.Internal.Helper;
        var ModifierUiElement = (function () {
            function ModifierUiElement(holder, shortDescription, longDescription) {
                this.element = Helper.div();
                this.element.style.display = 'inline-block';
                holder.append(this.element);
                Helper.addClass(this.element, 'modifiers');
                Helper.addClass(this.element, 'backGroundColor');
                Helper.addClass(this.element, 'borderRadiusBottomLeft');
                Helper.addClass(this.element, 'borderRadiusTopLeft');
                Helper.addClass(this.element, 'borderRadiusBottomRight');
                Helper.addClass(this.element, 'borderRadiusTopRight');
                this.shortDescription = shortDescription;
                this.longDescription = longDescription;
                this.switchDisplayName(true);
            }
            ModifierUiElement.prototype.switchDisplayName = function (useLongDescription) {
                this.updateRawText(useLongDescription ? this.longDescription : this.shortDescription);
            };
            ModifierUiElement.prototype.updateRawText = function (text) {
                this.element.innerHTML = text;
            };
            ModifierUiElement.prototype.getElement = function () {
                return this.element;
            };
            return ModifierUiElement;
        }());
        UiElement.ModifierUiElement = ModifierUiElement;
    })(UiElement = Freakylay.UiElement || (Freakylay.UiElement = {}));
})(Freakylay || (Freakylay = {}));
var Freakylay;
(function (Freakylay) {
    var UiElement;
    (function (UiElement) {
        var Helper = Freakylay.Internal.Helper;
        var ColorInput = (function () {
            function ColorInput(name, color, changeEvent, alphaCheck) {
                this.instance = ColorInput.Instance;
                ColorInput.Instance++;
                this.name = name;
                this.color = color;
                this.changeEvent = changeEvent;
                this.alphaCheck = alphaCheck;
            }
            ColorInput.prototype.createInputMenu = function (element) {
                var _this = this;
                var name = Helper.div();
                name.innerHTML = this.name;
                this.rElement = this.input(this.color.r, 'r');
                this.gElement = this.input(this.color.g, 'g');
                this.bElement = this.input(this.color.b, 'b');
                this.aElement = this.input(this.color.a, 'a');
                this.aInfoElement = Helper.create('span');
                this.aInfoElement.innerHTML = 'Not recommended';
                name.append(this.aInfoElement);
                Helper.visibility(this.aInfoElement, false);
                var colorHolder = Helper.div();
                Helper.addClass(colorHolder, 'colorInputs');
                this.rElement.oninput = function () {
                    _this.color.r = parseInt(_this.rElement.value);
                    _this.changeEvent(_this.color);
                };
                this.gElement.oninput = function () {
                    _this.color.g = parseInt(_this.gElement.value);
                    _this.changeEvent(_this.color);
                };
                this.bElement.oninput = function () {
                    _this.color.b = parseInt(_this.bElement.value);
                    _this.changeEvent(_this.color);
                };
                this.aElement.oninput = function () {
                    var a = parseInt(_this.aElement.value);
                    Helper.visibility(_this.aInfoElement, _this.alphaCheck(a));
                    _this.color.a = a;
                    _this.changeEvent(_this.color);
                };
                colorHolder.append(ColorInput.label('R:', this.rElement.id), this.rElement, ColorInput.label('G:', this.gElement.id), this.gElement, ColorInput.label('B:', this.bElement.id), this.bElement, ColorInput.label('A:', this.aElement.id), this.aElement);
                element.append(name, colorHolder);
            };
            ColorInput.prototype.input = function (value, id) {
                var i = Helper.create('input');
                i.type = 'range';
                i.min = '0';
                i.max = '255';
                i.value = value.toString();
                i.id = 'in_' + this.instance + id;
                return i;
            };
            ColorInput.label = function (text, id) {
                var l = Helper.create('label');
                l.htmlFor = id;
                l.innerHTML = text;
                return l;
            };
            ColorInput.Instance = 0;
            return ColorInput;
        }());
        UiElement.ColorInput = ColorInput;
    })(UiElement = Freakylay.UiElement || (Freakylay.UiElement = {}));
})(Freakylay || (Freakylay = {}));
var Freakylay;
(function (Freakylay) {
    var UiElement;
    (function (UiElement) {
        var Helper = Freakylay.Internal.Helper;
        var SettingLine = (function () {
            function SettingLine(name, setting, directCallback) {
                if (setting === void 0) { setting = null; }
                if (directCallback === void 0) { directCallback = null; }
                var _this = this;
                var line = Helper.div();
                var label = Helper.create('label');
                this.element = Helper.create('input');
                this.setting = setting;
                label.htmlFor = 'input_' + SettingLine.index;
                label.innerHTML = name;
                this.element.id = label.htmlFor;
                this.element.type = 'checkbox';
                if (directCallback == null) {
                    this.element.checked = this.setting.getValue();
                }
                this.element.onclick = function (e) {
                    var checked = !!e.target.checked;
                    if (directCallback != null && typeof directCallback == 'function') {
                        directCallback(checked);
                    }
                    else {
                        _this.setting.setValue(checked);
                    }
                    ui.onStyleChange();
                };
                line.append(this.element, label);
                ui.optionsLinesElement.append(line);
                SettingLine.index++;
            }
            SettingLine.index = 0;
            return SettingLine;
        }());
        UiElement.SettingLine = SettingLine;
    })(UiElement = Freakylay.UiElement || (Freakylay.UiElement = {}));
})(Freakylay || (Freakylay = {}));
var Freakylay;
(function (Freakylay) {
    var UiElement;
    (function (UiElement) {
        var Helper = Freakylay.Internal.Helper;
        var Tutorial = (function () {
            function Tutorial() {
                var _this = this;
                this.shown = false;
                this.element = Helper.element('tutorial');
                var headline = Helper.create('h1');
                headline.innerHTML = 'Welcome to Freakylay!';
                var description = Helper.create('p');
                description.innerHTML = 'Hey there player! It looks like you started me for the first time because you gave me no options.<br>Don\'t worry, just let me ask you a simple question:';
                var question = Helper.create('p');
                question.innerHTML = 'Configure me now?';
                var skipButton = Helper.create('input');
                skipButton.type = 'button';
                skipButton.value = 'skip this shit';
                skipButton.onclick = function () {
                    window.location.href = window.location.href + '?s';
                };
                var configButton = Helper.create('input');
                configButton.type = 'button';
                configButton.value = 'yes configure now!';
                configButton.onclick = function () {
                    ui.toggleOptionPanel();
                    _this.shown = false;
                    _this.destroy();
                };
                var buttons = Helper.div();
                buttons.append(skipButton, configButton);
                var copyright = Helper.div();
                copyright.innerHTML = 'Freakylay 2.2.2 &copy; 2020 - 2021 by UnskilledFreak';
                Helper.addClass(copyright, 'copy');
                this.element.append(headline, description, question, buttons, copyright);
            }
            Tutorial.prototype.show = function () {
                var _this = this;
                window.setTimeout(function () {
                    Helper.addClass(_this.element, 'show');
                    _this.shown = true;
                }, 250);
            };
            Tutorial.prototype.destroy = function () {
                this.element.remove();
            };
            Tutorial.prototype.isShown = function () {
                return this.shown;
            };
            return Tutorial;
        }());
        UiElement.Tutorial = Tutorial;
    })(UiElement = Freakylay.UiElement || (Freakylay.UiElement = {}));
})(Freakylay || (Freakylay = {}));
var Freakylay;
(function (Freakylay) {
    var MapData = Freakylay.Data.MapData;
    var LiveData = Freakylay.Data.LiveData;
    var Marquee = Freakylay.UiElement.Marquee;
    var CircleBar = Freakylay.UiElement.CircleBar;
    var ModifierUiElement = Freakylay.UiElement.ModifierUiElement;
    var Helper = Freakylay.Internal.Helper;
    var ColorInput = Freakylay.UiElement.ColorInput;
    var SettingLine = Freakylay.UiElement.SettingLine;
    var Color = Freakylay.Data.Color;
    var UrlManager = Freakylay.Internal.UrlManager;
    var Pulsoid = Freakylay.Data.Pulsoid;
    var Tutorial = Freakylay.UiElement.Tutorial;
    var UI = (function () {
        function UI() {
            var _this = this;
            this.css = {
                inactiveClass: 'inactive',
                borderRadiusTopLeft: 'borderRadiusTopLeft',
                borderRadiusTopRight: 'borderRadiusTopRight',
                borderRadiusBottomLeft: 'borderRadiusBottomLeft',
                borderRadiusBottomRight: 'borderRadiusBottomRight',
                flip: 'flip',
            };
            this.marquee = {
                songName: null,
                songArtist: null,
                difficulty: null
            };
            this.mapData = new MapData();
            this.liveData = new LiveData();
            this.urlManager = new UrlManager();
            this.pulsoidHandler = new Pulsoid();
            this.urlOptions = {
                ip: this.urlManager.registerOptionParam('ip', '127.0.0.1'),
                backgroundColor: this.urlManager.registerOptionParam('a', Color.fromUrl('rgba(255,133,255,0.7)')),
                textColor: this.urlManager.registerOptionParam('b', Color.fromUrl('ffffff')),
                shortModifierNames: this.urlManager.registerOptionParam('c', false),
                showPrevBsr: this.urlManager.registerOptionParam('d', false),
                missCounter: this.urlManager.registerOptionParam('e', true),
                showBpm: this.urlManager.registerOptionParam('f', true),
                showNjs: this.urlManager.registerOptionParam('g', true),
                showCombo: this.urlManager.registerOptionParam('h', true),
                flipStatic: this.urlManager.registerOptionParam('i', false),
                flipLive: this.urlManager.registerOptionParam('j', false),
                flipModifiers: this.urlManager.registerOptionParam('k', false),
                showScoreIncrease: this.urlManager.registerOptionParam('l', true),
                showFullComboModifier: this.urlManager.registerOptionParam('m', true),
                showTimeString: this.urlManager.registerOptionParam('n', false),
                previewMode: this.urlManager.registerOptionParam('options', false),
                songInfoOnTop: this.urlManager.registerOptionParam('o', false),
                hideDefaultDifficulty: this.urlManager.registerOptionParam('p', false),
                hideAllModifiers: this.urlManager.registerOptionParam('q', false),
                pulsoidFeed: this.urlManager.registerOptionParam('r', ''),
                skipSplash: this.urlManager.registerOptionParam('s', false),
                hideCounterSection: this.urlManager.registerOptionParam('t', false),
                hideSongInfo: this.urlManager.registerOptionParam('u', false)
            };
            this.urlParams = new URLSearchParams(location.search);
            document.body.ondblclick = function (e) {
                if (e.target !== _this.songInfoHolder && _this.uiShown || _this.tutorial.isShown()) {
                    return;
                }
                _this.toggleOptionPanel();
            };
            this.loadAndBuildUiElements();
            this.uiShown = true;
            this.health.setProgress(0, 100);
            this.accuracy.setProgress(0, 100);
            this.updateTimeCircleBar(0, 60);
            this.tutorial = new Tutorial();
            window.setTimeout(function () {
                if (_this.urlManager.areAllDefault()) {
                    _this.tutorial.show();
                }
                else {
                    _this.tutorial.destroy();
                }
                _this.buildOptionsPanel();
                _this.calculateOptionPosition();
                _this.openOptionPanel();
                _this.updateMap({});
                _this.updateLive({});
                _this.onStyleChange();
                _this.pulsoidHandler.start();
                window.addEventListener(Pulsoid.EVENT, function (ev) {
                    var max = 210;
                    var min = 60;
                    var bpm = ev.detail;
                    if (bpm == 0) {
                        Helper.removeClass(_this.counterSection, 'pulsoid');
                        return;
                    }
                    Helper.addClass(_this.counterSection, 'pulsoid');
                    var currentProgress = Helper.clamp(bpm - min, 0, max - min);
                    _this.pulsoid.setProgress(currentProgress, max - min);
                    _this.pulsoid.setText('Heart<br>' + bpm);
                    Helper.display(_this.pulsoidHolder, true);
                });
                Helper.display(_this.pulsoidHolder, false);
            }, 100);
        }
        UI.prototype.toggleOptionPanel = function () {
            this.urlOptions.previewMode.setValue(!this.urlOptions.previewMode.getValue());
            this.openOptionPanel();
            this.onStyleChange();
        };
        UI.prototype.onStyleChange = function () {
            var _this = this;
            document.body.style.color = this.urlOptions.textColor.getValue().toRgb();
            document.querySelectorAll('.roundBar circle').forEach(function (element) {
                element.style.stroke = _this.urlOptions.textColor.getValue().toRgb();
            }, this);
            document.querySelectorAll('.backGroundColor').forEach(function (element) {
                element.style.backgroundColor = _this.urlOptions.backgroundColor.getValue().toRgb();
            }, this);
            var shortModifiers = !this.urlOptions.shortModifierNames.getValue();
            this.modifiers.noFail.switchDisplayName(shortModifiers);
            this.modifiers.oneLife.switchDisplayName(shortModifiers);
            this.modifiers.fourLives.switchDisplayName(shortModifiers);
            this.modifiers.noBombs.switchDisplayName(shortModifiers);
            this.modifiers.noWalls.switchDisplayName(shortModifiers);
            this.modifiers.noArrows.switchDisplayName(shortModifiers);
            this.modifiers.ghostNotes.switchDisplayName(shortModifiers);
            this.modifiers.disappearingArrows.switchDisplayName(shortModifiers);
            this.modifiers.smallNotes.switchDisplayName(shortModifiers);
            this.modifiers.proMode.switchDisplayName(shortModifiers);
            this.modifiers.strictAngles.switchDisplayName(shortModifiers);
            this.modifiers.zenMode.switchDisplayName(shortModifiers);
            this.modifiers.slowerSong.switchDisplayName(shortModifiers);
            this.modifiers.fasterSong.switchDisplayName(shortModifiers);
            this.modifiers.superFastSong.switchDisplayName(shortModifiers);
            this.modifiers.fullCombo.switchDisplayName(shortModifiers);
            this.modifiers.percentSpeed.switchDisplayName(shortModifiers);
            this.modifiers.practiceMode.switchDisplayName(shortModifiers);
            Helper.visibility(this.data.previousBSRTop, this.urlOptions.showPrevBsr.getValue());
            Helper.visibility(this.data.previousBSRBottom, this.urlOptions.showPrevBsr.getValue());
            Helper.display(this.data.combo, this.urlOptions.showCombo.getValue(), true);
            Helper.display(this.data.bpm, this.urlOptions.showBpm.getValue(), true);
            Helper.display(this.data.njs, this.urlOptions.showNjs.getValue(), true);
            Helper.display(this.data.miss, this.urlOptions.missCounter.getValue(), true);
            if (this.urlOptions.previewMode.getValue()) {
                this.setPreviewData();
            }
            else {
                this.mapData.InLevel.setValue(false);
                this.updateMap();
            }
            var flipBorderRadius = function (element, flip) {
                var v = flip.getValue();
                Helper.toggleClass(element, !v, _this.css.borderRadiusTopLeft);
                Helper.toggleClass(element, !v, _this.css.borderRadiusBottomLeft);
                Helper.toggleClass(element, v, _this.css.borderRadiusTopRight);
                Helper.toggleClass(element, v, _this.css.borderRadiusBottomRight);
            };
            flipBorderRadius(this.songInfo.bsr, this.urlOptions.flipStatic);
            flipBorderRadius(this.songInfo.mapper, this.urlOptions.flipStatic);
            flipBorderRadius(this.songInfo.difficulty, this.urlOptions.flipStatic);
            flipBorderRadius(this.songInfo.artist, this.urlOptions.flipStatic);
            flipBorderRadius(this.songInfo.songName, this.urlOptions.flipStatic);
            var flipOption = this.urlOptions.flipStatic.getValue();
            var topOption = this.urlOptions.songInfoOnTop.getValue();
            Helper.toggleClass(this.beatMapCover, !flipOption && !topOption, this.css.borderRadiusBottomRight);
            Helper.toggleClass(this.beatMapCover, flipOption && !topOption, this.css.borderRadiusBottomLeft);
            Helper.toggleClass(this.beatMapCover, !flipOption && topOption, this.css.borderRadiusTopRight);
            Helper.toggleClass(this.beatMapCover, flipOption && topOption, this.css.borderRadiusTopLeft);
            var showPrevBsrOption = !this.urlOptions.showPrevBsr.getValue();
            if (flipOption) {
                if (topOption) {
                    Helper.toggleClass(this.beatMapCover, showPrevBsrOption, this.css.borderRadiusBottomLeft);
                }
                else {
                    Helper.toggleClass(this.beatMapCover, showPrevBsrOption, this.css.borderRadiusTopLeft);
                }
            }
            else {
                if (topOption) {
                    Helper.toggleClass(this.beatMapCover, showPrevBsrOption, this.css.borderRadiusBottomRight);
                }
                else {
                    Helper.toggleClass(this.beatMapCover, showPrevBsrOption, this.css.borderRadiusTopRight);
                }
            }
            Helper.toggleClass(this.songInfoHolder, this.urlOptions.flipStatic.getValue(), this.css.flip);
            Helper.toggleClass(this.modifiersHolder, this.urlOptions.flipModifiers.getValue(), this.css.flip);
            Helper.toggleClass(this.counterSection, this.urlOptions.flipLive.getValue(), this.css.flip);
            Helper.toggleClass(this.songInfoHolder, this.urlOptions.songInfoOnTop.getValue(), 'top');
            var options = [];
            if (!this.urlOptions.backgroundColor.isDefaultValue()) {
                options.push(this.urlOptions.backgroundColor.getUrlValue());
            }
            if (!this.urlOptions.textColor.isDefaultValue()) {
                options.push(this.urlOptions.textColor.getUrlValue());
            }
            if (!this.urlOptions.ip.isDefaultValue()) {
                options.push(this.urlOptions.ip.getUrlValue());
            }
            [
                this.urlOptions.shortModifierNames,
                this.urlOptions.showPrevBsr,
                this.urlOptions.missCounter,
                this.urlOptions.showBpm,
                this.urlOptions.showNjs,
                this.urlOptions.showCombo,
                this.urlOptions.flipStatic,
                this.urlOptions.flipLive,
                this.urlOptions.flipModifiers,
                this.urlOptions.showScoreIncrease,
                this.urlOptions.showFullComboModifier,
                this.urlOptions.showTimeString,
                this.urlOptions.songInfoOnTop,
                this.urlOptions.hideDefaultDifficulty,
                this.urlOptions.hideAllModifiers,
                this.urlOptions.hideCounterSection,
                this.urlOptions.hideSongInfo
            ].forEach(function (x) {
                if (!x.isDefaultValue()) {
                    options.push(x.getUrlValue());
                }
            });
            if (this.pulsoidHandler.isInitialized()) {
                options.push(this.urlOptions.pulsoidFeed.getUrlValue());
            }
            else {
                Helper.display(this.pulsoidHolder, false);
            }
            if (options.length == 0) {
                options.push('s');
            }
            var optionsString = options.length > 0 ? '?' + options.join('&') : '';
            this.urlText.innerHTML = window.location.protocol + '//' + window.location.host + window.location.pathname + optionsString;
        };
        UI.prototype.buildOptionsPanel = function () {
            var _this = this;
            var backgroundColor = new ColorInput('Background Color', this.urlOptions.backgroundColor.getValue(), function (c) {
                _this.urlOptions.backgroundColor.setValue(c);
                _this.onStyleChange();
            }, function (a) {
                return a > 10 && (a < 127 || a > 230);
            });
            var textColor = new ColorInput('Text Color', this.urlOptions.textColor.getValue(), function (c) {
                _this.urlOptions.textColor.setValue(c);
                _this.onStyleChange();
            }, function (a) {
                return a < 127;
            });
            this.pulsoidFeedUrlInput.value = this.urlOptions.pulsoidFeed.getValue();
            this.pulsoidHandler.setUrl(this.pulsoidFeedUrlInput.value);
            new SettingLine('Short Modifiers', this.urlOptions.shortModifierNames);
            new SettingLine('Miss Counter', this.urlOptions.missCounter);
            new SettingLine('Previous BSR', this.urlOptions.showPrevBsr);
            new SettingLine('BPM', this.urlOptions.showBpm);
            new SettingLine('NJS', this.urlOptions.showNjs);
            new SettingLine('Combo', this.urlOptions.showCombo);
            new SettingLine('Score arrow pointing up or down depending on last score', this.urlOptions.showScoreIncrease);
            new SettingLine('Full Combo modifier', this.urlOptions.showFullComboModifier);
            new SettingLine('Current time only', this.urlOptions.showTimeString);
            new SettingLine('Default difficulty only when no custom difficulty exist', this.urlOptions.hideDefaultDifficulty);
            this.optionsLinesElement.append(Helper.create('hr'));
            new SettingLine('Hide all modifiers', this.urlOptions.hideAllModifiers);
            new SettingLine('Hide complete counter section', this.urlOptions.hideCounterSection, function (checked) {
                _this.urlOptions.hideCounterSection.setValue(checked);
                _this.hideUi();
                _this.showUi();
            });
            new SettingLine('Hide complete song info', this.urlOptions.hideSongInfo, function (checked) {
                _this.urlOptions.hideSongInfo.setValue(checked);
                _this.hideUi();
                _this.showUi();
            });
            this.optionsLinesElement.append(Helper.create('hr'));
            new SettingLine('Flip SongInfo to left', this.urlOptions.flipStatic);
            new SettingLine('Flip Modifiers to left', this.urlOptions.flipModifiers);
            new SettingLine('Flip Counter section to top', this.urlOptions.flipLive);
            new SettingLine('Flip SongInfo to top', this.urlOptions.songInfoOnTop);
            this.optionsLinesElement.append(Helper.create('hr'));
            new SettingLine('Test with Background Image', null, function (checked) {
                document.body.style.backgroundImage = checked ? 'url(img/beat-saber-5.jpg)' : 'none';
            });
            backgroundColor.createInputMenu(Helper.element('bgColor'));
            textColor.createInputMenu(Helper.element('color'));
        };
        UI.prototype.updateLive = function (liveData) {
            if (liveData === void 0) { liveData = null; }
            if (liveData != null) {
                this.liveData.update(liveData);
            }
            this.updatecounterSection();
            this.updateFullCombo();
        };
        UI.prototype.updateMap = function (mapData) {
            if (mapData === void 0) { mapData = null; }
            if (mapData != null) {
                this.mapData.update(mapData);
            }
            this.calculateMapLength();
            this.updateModifiers();
            this.toggleUi();
            this.updateSongInfo();
        };
        UI.prototype.getUrlIp = function () {
            return this.urlOptions.ip.getCheckedValue();
        };
        UI.prototype.openOptionPanel = function () {
            if (this.urlOptions.previewMode.getValue()) {
                Helper.addClass(this.optionsElement, 'show');
            }
            else {
                Helper.removeClass(this.optionsElement, 'show');
            }
        };
        UI.prototype.setPreviewData = function () {
            this.mapData.GameVersion.setValue('1.13.2');
            this.mapData.PluginVersion.setValue('2.0.0.0');
            this.mapData.InLevel.setValue(true);
            this.mapData.LevelPaused.setValue(false);
            this.mapData.LevelFinished.setValue(false);
            this.mapData.LevelFailed.setValue(false);
            this.mapData.LevelQuit.setValue(false);
            this.mapData.Hash.setValue('648B7FE961C398DE638FA1E614878F1194ADF92E');
            this.mapData.SongName.setValue('SongName');
            this.mapData.SongSubName.setValue('SongSubName');
            this.mapData.SongAuthor.setValue('SongAuthor');
            this.mapData.Mapper.setValue('Mapper');
            this.mapData.BSRKey.setValue('d00c');
            this.mapData.CoverImage.setValue('img/BS_Logo.jpg');
            this.mapData.Length.setValue(336);
            this.mapData.TimeScale.setValue(0);
            this.mapData.MapType.setValue('Standard');
            this.mapData.Difficulty.setValue('ExpertPlus');
            this.mapData.CustomDifficultyLabel.setValue('Freaky');
            this.mapData.BPM.setValue(200);
            this.mapData.NJS.setValue(23);
            this.mapData.ModifiersMultiplier.setValue(1);
            this.mapData.PracticeMode.setValue(true);
            this.mapData.PP.setValue(0);
            this.mapData.Star.setValue(0);
            this.mapData.IsMultiplayer.setValue(false);
            this.mapData.PreviousRecord.setValue(987123);
            this.mapData.PreviousBSR.setValue('8e9c');
            this.mapData.Modifiers.noFail.setValue(true);
            this.mapData.Modifiers.oneLife.setValue(true);
            this.mapData.Modifiers.fourLives.setValue(true);
            this.mapData.Modifiers.noBombs.setValue(true);
            this.mapData.Modifiers.noWalls.setValue(true);
            this.mapData.Modifiers.noArrows.setValue(true);
            this.mapData.Modifiers.ghostNotes.setValue(true);
            this.mapData.Modifiers.disappearingArrows.setValue(true);
            this.mapData.Modifiers.smallNotes.setValue(true);
            this.mapData.Modifiers.proMode.setValue(true);
            this.mapData.Modifiers.strictAngles.setValue(true);
            this.mapData.Modifiers.zenMode.setValue(true);
            this.mapData.Modifiers.slowerSong.setValue(true);
            this.mapData.Modifiers.fasterSong.setValue(true);
            this.mapData.Modifiers.superFastSong.setValue(true);
            this.mapData.PracticeModeModifiers.songSpeedMul.setValue(0.8);
            this.liveData.Score.setValue(1234567);
            this.liveData.ScoreWithMultipliers.setValue(1234567);
            this.liveData.MaxScore.setValue(2345678);
            this.liveData.MaxScoreWithMultipliers.setValue(2345678);
            this.liveData.Rank.setValue('SS');
            this.liveData.FullCombo.setValue(true);
            this.liveData.Combo.setValue(322);
            this.liveData.Misses.setValue(0);
            this.liveData.Accuracy.setValue(94.21564618131514);
            this.liveData.PlayerHealth.setValue(100);
            this.liveData.TimeElapsed.setValue(66);
            this.updateMap();
            this.updateLive();
        };
        UI.prototype.loadAndBuildUiElements = function () {
            var _this = this;
            this.modifiersHolder = Helper.element('modifiers');
            this.modifiers = {
                noFail: new ModifierUiElement(this.modifiersHolder, 'NF', 'No Fail'),
                oneLife: new ModifierUiElement(this.modifiersHolder, 'OL', 'One Life'),
                fourLives: new ModifierUiElement(this.modifiersHolder, 'FL', 'Four Live'),
                noBombs: new ModifierUiElement(this.modifiersHolder, 'NB', 'No Bombs'),
                noWalls: new ModifierUiElement(this.modifiersHolder, 'NW', 'No Walls'),
                noArrows: new ModifierUiElement(this.modifiersHolder, 'NA', 'No Arrow'),
                ghostNotes: new ModifierUiElement(this.modifiersHolder, 'GN', 'Ghost Notes'),
                disappearingArrows: new ModifierUiElement(this.modifiersHolder, 'DA', 'Disappearing Arrows'),
                smallNotes: new ModifierUiElement(this.modifiersHolder, 'SN', 'Small Notes'),
                proMode: new ModifierUiElement(this.modifiersHolder, 'PM', 'Pro Mode'),
                strictAngles: new ModifierUiElement(this.modifiersHolder, 'SA', 'Strict Angles'),
                zenMode: new ModifierUiElement(this.modifiersHolder, 'ZM', 'Zen Mode'),
                slowerSong: new ModifierUiElement(this.modifiersHolder, 'SS', 'Slower Song'),
                fasterSong: new ModifierUiElement(this.modifiersHolder, 'FS', 'Faster Song'),
                superFastSong: new ModifierUiElement(this.modifiersHolder, 'SFS', 'Super Fast Song'),
                fullCombo: new ModifierUiElement(this.modifiersHolder, 'FC', 'Full Combo'),
                practiceMode: new ModifierUiElement(this.modifiersHolder, 'PRM', 'Practice Mode'),
                percentSpeed: new ModifierUiElement(this.modifiersHolder, '0%', '0%')
            };
            this.timer = new CircleBar(Helper.element('timerHolder'));
            this.health = new CircleBar(Helper.element('healthHolder'), function (percent) {
                return '<small>Health</small>' + parseFloat(percent).toFixed(0) + '%';
            });
            this.accuracy = new CircleBar(Helper.element('accuracyHolder'), function (percent) {
                return '<small>Accuracy</small>' + percent + '%';
            });
            this.pulsoid = new CircleBar(Helper.element('pulsoidHolder'));
            this.songInfoHolder = Helper.element('songInfo');
            this.beatMapCover = Helper.element('beatMapCover');
            this.songInfo = {
                bsr: Helper.element('bsr'),
                mapper: Helper.element('mapper'),
                difficulty: Helper.element('difficulty'),
                artist: Helper.element('artist'),
                songName: Helper.element('mapName'),
                cover: Helper.element('cover')
            };
            this.counterSection = Helper.element('counterSection');
            this.data = {
                score: Helper.element('score'),
                combo: Helper.element('combo'),
                previousBSRTop: Helper.element('previousBSRTop'),
                previousBSRBottom: Helper.element('previousBSRBottom'),
                njs: Helper.element('njs'),
                bpm: Helper.element('bpm'),
                miss: Helper.element('miss'),
            };
            this.optionsElement = Helper.element('options');
            this.optionsLinesElement = Helper.element('optionsLines');
            this.urlText = Helper.element('urlText');
            this.marquee.songName = new Marquee(Helper.element('marqueeSongName'));
            this.marquee.songArtist = new Marquee(Helper.element('marqueeSongArtist'));
            this.marquee.difficulty = new Marquee(Helper.element('marqueeDifficulty'));
            this.urlText.onclick = function () {
                _this.urlText.focus();
                _this.urlText.select();
                document.execCommand('copy');
            };
            this.ipText = Helper.element('ip');
            this.changeIp = Helper.element('changeIp');
            this.changeIp.onclick = function () {
                _this.urlOptions.ip.setValue(_this.ipText.value);
                connection.reconnect(_this.urlOptions.ip.getValue());
                _this.onStyleChange();
            };
            this.pulsoidFeedUrlInput = Helper.element('pulsoidFeed');
            (Helper.element('pulsoidFeedButton')).onclick = function () {
                _this.pulsoidHandler.setUrl(_this.pulsoidFeedUrlInput.value);
                _this.urlOptions.pulsoidFeed.setValue(_this.pulsoidHandler.getUrl());
                _this.onStyleChange();
            };
            this.pulsoidHolder = Helper.element('pulsoidHolder');
        };
        UI.prototype.calculateOptionPosition = function () {
            var styles = window.getComputedStyle(this.optionsElement, null);
            this.optionsElement.style.marginTop = (-parseInt(styles.getPropertyValue('height')) / 2) + 'px';
            this.optionsElement.style.marginLeft = (-parseInt(styles.getPropertyValue('width')) / 2) + 'px';
        };
        UI.prototype.updateTimeCircleBar = function (current, total) {
            current = Helper.clamp(current, 0, total);
            var text;
            if (this.urlOptions.showTimeString.getValue()) {
                text = 'Time<br>' + UI.getDate(current);
            }
            else {
                text = UI.getDate(current) + '<br>' + UI.getDate(total);
            }
            this.timer.setText(text);
            this.timer.setProgress(current, total);
        };
        UI.prototype.calculateMapLength = function () {
            this.mapLength = this.mapData.Length.getValue();
            if (this.mapData.PracticeMode.getValue()) {
                this.mapLength = parseInt((this.mapData.Length.getValue() / this.mapData.PracticeModeModifiers.songSpeedMul.getValue()).toString());
            }
            else if (this.mapData.Modifiers.fasterSong.getValue() || this.mapData.Modifiers.slowerSong.getValue()) {
                this.mapLength = parseInt((this.mapData.Length.getValue() * (this.mapData.Modifiers.fasterSong ? .8 : 1.15)).toString());
            }
        };
        UI.prototype.showUi = function () {
            if (!this.urlOptions.hideSongInfo.getValue()) {
                Helper.removeClass(this.songInfoHolder, this.css.inactiveClass);
            }
            if (!this.urlOptions.hideCounterSection.getValue()) {
                Helper.removeClass(this.counterSection, this.css.inactiveClass);
            }
            Helper.removeClass(this.modifiersHolder, this.css.inactiveClass);
            this.uiShown = true;
        };
        UI.prototype.hideUi = function () {
            Helper.addClass(this.songInfoHolder, this.css.inactiveClass);
            Helper.addClass(this.counterSection, this.css.inactiveClass);
            Helper.addClass(this.modifiersHolder, this.css.inactiveClass);
            this.uiShown = false;
        };
        UI.prototype.toggleUi = function () {
            if (this.urlOptions.previewMode.getValue()) {
                this.showUi();
                return;
            }
            if (this.mapData.InLevel.getValue() && !this.uiShown) {
                this.showUi();
            }
            else if (!this.mapData.InLevel.getValue() && this.uiShown) {
                this.hideUi();
                this.marquee.songName.stop();
                this.marquee.songArtist.stop();
                this.marquee.difficulty.stop();
            }
        };
        UI.prototype.updateModifiers = function () {
            var hideAllModifiers = this.urlOptions.hideAllModifiers.getValue();
            for (var modifier in this.mapData.Modifiers) {
                if (typeof this.modifiers[modifier] !== 'undefined') {
                    Helper.display(this.modifiers[modifier].getElement(), hideAllModifiers ? false : this.mapData.Modifiers[modifier].getValue(), true);
                }
            }
            Helper.display(this.modifiers.practiceMode.getElement(), hideAllModifiers ? false : this.mapData.PracticeMode.getValue(), true);
            if (this.mapData.PracticeMode.getValue()) {
                var readableSpeed = parseInt((this.mapData.PracticeModeModifiers.songSpeedMul.getValue() * 100 - 100).toFixed());
                var identifier = readableSpeed > 0 ? '+' : '';
                if (readableSpeed === 100) {
                    Helper.display(this.modifiers.percentSpeed.getElement(), false, true);
                }
                else {
                    Helper.display(this.modifiers.percentSpeed.getElement(), !hideAllModifiers, true);
                    this.modifiers.percentSpeed.updateRawText((this.urlOptions.shortModifierNames.getValue() ? '' : 'Speed: ') + identifier + readableSpeed + '%');
                }
                Helper.display(this.modifiers.percentSpeed.getElement(), hideAllModifiers ? false : this.mapData.PracticeModeModifiers.songSpeedMul.getValue() != 1, true);
            }
            else {
                Helper.display(this.modifiers.percentSpeed.getElement(), false, true);
            }
        };
        UI.prototype.updateSongInfo = function () {
            Helper.toggleClass(this.beatMapCover, this.mapData.BSRKey.getValue().length === 0 || this.mapData.BSRKey.getValue() === 'BSRKey', this.urlOptions.flipStatic.getValue() ? this.css.borderRadiusTopRight : this.css.borderRadiusTopLeft);
            this.data.previousBSRTop.innerHTML = this.mapData.PreviousBSR.getValue().length > 0 ? 'Prev-BSR: ' + this.mapData.PreviousBSR.getValue() : '';
            this.data.previousBSRBottom.innerHTML = this.mapData.PreviousBSR.getValue().length > 0 ? 'Prev-BSR: ' + this.mapData.PreviousBSR.getValue() : '';
            UI.hideSetting(this.songInfo.bsr, this.mapData.BSRKey.getValue() === 'BSRKey' ? '' : this.mapData.BSRKey.getValue(), 'BSR: ');
            UI.hideSetting(this.songInfo.mapper, this.mapData.Mapper.getValue());
            this.marquee.songName.setValue(this.mapData.SongName.getValue());
            this.marquee.songArtist.setValue(this.mapData.getSongAuthorLine());
            this.marquee.difficulty.setValue(this.mapData.getFullDifficultyLabel(this.urlOptions.hideDefaultDifficulty.getValue()));
            this.songInfo.cover.style.backgroundImage = 'url(\'' + this.mapData.CoverImage.getValue() + '\')';
            this.data.bpm.innerHTML = '<span>BPM</span>' + this.mapData.BPM.getValue();
            this.data.njs.innerHTML = '<span>NJS</span>' + this.mapData.NJS.getValue().toFixed(1);
        };
        UI.prototype.updatecounterSection = function () {
            this.updateTimeCircleBar(this.urlOptions.previewMode.getValue() ? this.mapLength / 2 : this.liveData.TimeElapsed.getValue(), this.mapLength);
            this.accuracy.setProgress(parseFloat(this.liveData.Accuracy.getValue().toFixed(2)), 100);
            var arrow = '';
            if (this.urlOptions.showScoreIncrease.getValue()) {
                var lS = this.liveData.Score.getValue();
                var pR = this.mapData.PreviousRecord.getValue();
                arrow = lS < pR ? '&darr;' : lS > pR ? '&uarr;' : '';
            }
            this.data.combo.innerHTML = '<span>Combo</span>' + this.liveData.Combo.getValue();
            this.data.miss.innerHTML = '<span>MISS</span>' + this.liveData.Misses.getValue();
            this.data.score.innerHTML = arrow + new Intl.NumberFormat('en-US').format(this.liveData.Score.getValue()).replace(/,/g, ' ');
            this.health.setProgress(parseInt(this.liveData.PlayerHealth.getValue().toFixed(0)), 100);
        };
        UI.prototype.updateFullCombo = function () {
            var hasFc = this.urlOptions.showFullComboModifier.getValue() && this.liveData.FullCombo.getValue();
            if (this.urlOptions.hideAllModifiers.getValue()) {
                hasFc = false;
            }
            Helper.display(this.modifiers.fullCombo.getElement(), hasFc, true);
            UI.insertModifierBreakLines();
        };
        UI.getDate = function (input) {
            var seconds = input % 60;
            var minutes = Math.floor(input / 60);
            var sSeconds = seconds < 10 ? '0' + seconds : seconds.toString();
            return minutes < 0 ? sSeconds : minutes + ':' + sSeconds;
        };
        UI.insertModifierBreakLines = function () {
            var modifierElements = document.querySelectorAll('#modifiers > *');
            var modifiers = [];
            modifierElements.forEach(function (x) {
                if (x.classList.contains('modifiers')) {
                    modifiers.push(x);
                }
                else {
                    x.remove();
                }
            }, this);
            for (var _i = 0, modifiers_1 = modifiers; _i < modifiers_1.length; _i++) {
                var e = modifiers_1[_i];
                if (e.style.display === 'inline-block') {
                    e.parentNode.insertBefore(Helper.create('br'), e.nextSibling);
                }
            }
        };
        UI.hideSetting = function (element, value, prefix) {
            if (prefix === void 0) { prefix = ''; }
            if (value.length > 0) {
                Helper.visibility(element, true);
                element.innerHTML = prefix + value;
                return;
            }
            Helper.visibility(element, false);
        };
        return UI;
    }());
    Freakylay.UI = UI;
})(Freakylay || (Freakylay = {}));
var connection;
var ui;
window.onload = function () {
    console.log('If you don\'t have the BSDataPuller mod then download the latest release from here and place it in your BS mods folder: https://github.com/kOFReadie/DataPuller/releases/latest');
    ui = new Freakylay.UI();
    connection = new Freakylay.Connector.MultiConnection(ui.getUrlIp(), 2946);
    connection.addEndpoint('BSDataPuller/LiveData', function (data) {
        ui.updateLive(data);
    });
    connection.addEndpoint('BSDataPuller/MapData', function (data) {
        ui.updateMap(data);
    });
    ui.ipText.value = connection.getUrl(true);
};
var Freakylay;
(function (Freakylay) {
    var Connector;
    (function (Connector) {
        var Connection = (function () {
            function Connection(url, messageCallback, openCallback, closeCallback, errorCallback) {
                if (errorCallback === void 0) { errorCallback = null; }
                this.url = url;
                this.callbacks = {
                    message: messageCallback,
                    open: openCallback,
                    close: closeCallback,
                    error: errorCallback
                };
                this.connect();
            }
            Connection.prototype.reconnect = function (url) {
                if (url === void 0) { url = null; }
                if (url != null) {
                    this.url = url;
                }
                this.log('reconnecting');
                this.socket.close();
                this.connect();
            };
            Connection.prototype.connect = function () {
                var _this = this;
                this.socket = new WebSocket(this.url);
                this.socket.onopen = function (message) {
                    _this.onOpen(message);
                };
                this.socket.onmessage = function (message) {
                    _this.onMessage(message);
                };
                this.socket.onclose = function () {
                    _this.onClose();
                };
                this.socket.onerror = function () {
                    _this.onError();
                };
            };
            Connection.prototype.log = function (msg) {
                console.log('[' + this.url + '] ' + msg);
            };
            Connection.prototype.onOpen = function (message) {
                this.log('connection estabilished');
                this.callbacks.open(message);
            };
            Connection.prototype.onClose = function () {
                this.log('lost connection!');
                this.callbacks.close();
            };
            Connection.prototype.onMessage = function (message) {
                this.callbacks.message(message);
            };
            Connection.prototype.onError = function () {
                if (typeof this.callbacks.error == 'function') {
                    this.callbacks.error();
                }
            };
            return Connection;
        }());
        Connector.Connection = Connection;
    })(Connector = Freakylay.Connector || (Freakylay.Connector = {}));
})(Freakylay || (Freakylay = {}));
var Freakylay;
(function (Freakylay) {
    var Connector;
    (function (Connector) {
        var MultiConnection = (function () {
            function MultiConnection(ip, port) {
                this.connections = [];
                this.ip = ip;
                this.port = port;
            }
            MultiConnection.prototype.addEndpoint = function (name, callback) {
                var _this = this;
                this.connections[name] = new Connector.Connection(this.getUrl() + name, function (data) {
                    callback(JSON.parse(data.data));
                }, function () { }, function () {
                    window.setTimeout(function () {
                        _this.addEndpoint(name, callback);
                    }, 5000);
                });
            };
            MultiConnection.prototype.getUrl = function (onlyIp) {
                if (onlyIp === void 0) { onlyIp = false; }
                if (onlyIp) {
                    return this.ip;
                }
                return 'ws:' + this.getUrl(true) + ':' + this.port + '/';
            };
            MultiConnection.prototype.reconnect = function (ip, port) {
                var _this = this;
                if (ip === void 0) { ip = null; }
                if (port === void 0) { port = null; }
                if (ip != null) {
                    this.ip = ip;
                }
                if (port != null) {
                    this.port = port;
                }
                this.connections.forEach(function (conn) {
                    conn.reconnect(_this.getUrl());
                }, this);
            };
            return MultiConnection;
        }());
        Connector.MultiConnection = MultiConnection;
    })(Connector = Freakylay.Connector || (Freakylay.Connector = {}));
})(Freakylay || (Freakylay = {}));
var Freakylay;
(function (Freakylay) {
    var Data;
    (function (Data) {
        var DataKey = Freakylay.Internal.DataKey;
        function modifiersDataKey(key, defaultValue) {
            return new DataKey(key, defaultValue);
        }
        var Modifiers = (function () {
            function Modifiers() {
                this.noFail = modifiersDataKey('NoFailOn0Energy', false);
                this.oneLife = modifiersDataKey('OneLife', false);
                this.fourLives = modifiersDataKey('FourLives', false);
                this.noBombs = modifiersDataKey('NoBombs', false);
                this.noWalls = modifiersDataKey('NoWalls', false);
                this.noArrows = modifiersDataKey('NoArrows', false);
                this.ghostNotes = modifiersDataKey('GhostNotes', false);
                this.disappearingArrows = modifiersDataKey('DisappearingArrows', false);
                this.smallNotes = modifiersDataKey('SmallNotes', false);
                this.proMode = modifiersDataKey('ProMode', false);
                this.strictAngles = modifiersDataKey('StrictAngles', false);
                this.zenMode = modifiersDataKey('ZenMode', false);
                this.slowerSong = modifiersDataKey('SlowerSong', false);
                this.fasterSong = modifiersDataKey('FasterSong', false);
                this.superFastSong = modifiersDataKey('SuperFastSong', false);
            }
            Modifiers.prototype.update = function (data) {
                if (!(data && Object.keys(data).length > 0)) {
                    return;
                }
                this.noFail.update(data);
                this.oneLife.update(data);
                this.fourLives.update(data);
                this.noBombs.update(data);
                this.noWalls.update(data);
                this.noArrows.update(data);
                this.ghostNotes.update(data);
                this.disappearingArrows.update(data);
                this.smallNotes.update(data);
                this.proMode.update(data);
                this.strictAngles.update(data);
                this.zenMode.update(data);
                this.slowerSong.update(data);
                this.fasterSong.update(data);
                this.superFastSong.update(data);
            };
            return Modifiers;
        }());
        Data.Modifiers = Modifiers;
    })(Data = Freakylay.Data || (Freakylay.Data = {}));
})(Freakylay || (Freakylay = {}));
var Freakylay;
(function (Freakylay) {
    var Data;
    (function (Data) {
        var DataKey = Freakylay.Internal.DataKey;
        function pmmDataKey(key, defaultValue) {
            return new DataKey(key, defaultValue);
        }
        var PracticeModeModifiers = (function () {
            function PracticeModeModifiers() {
                this.songSpeedMul = pmmDataKey('SongSpeedMul', 1.0);
                this.startInAdvanceAndClearNotes = pmmDataKey('StartInAdvanceAndClearNotes', 1.0);
                this.startSongTime = pmmDataKey('SongStartTime', 0.0);
                this.startSongTime.setValue(Math.round(this.songSpeedMul.getValue() * 100) / 100);
            }
            PracticeModeModifiers.prototype.update = function (data) {
                if (!(data && Object.keys(data).length > 0)) {
                    return;
                }
                this.songSpeedMul.update(data);
                this.startInAdvanceAndClearNotes.update(data);
                this.startSongTime.update(data);
            };
            return PracticeModeModifiers;
        }());
        Data.PracticeModeModifiers = PracticeModeModifiers;
    })(Data = Freakylay.Data || (Freakylay.Data = {}));
})(Freakylay || (Freakylay = {}));
var Freakylay;
(function (Freakylay) {
    var Internal;
    (function (Internal) {
        var Color = Freakylay.Data.Color;
        var UrlParam = (function () {
            function UrlParam(manager, key, def, compareFn) {
                if (compareFn === void 0) { compareFn = null; }
                this.key = key;
                this.default = def;
                this.hasKey = manager.urlParams.has(this.key);
                this.value = this.default;
                this.compareFn = compareFn;
                if (this.hasKey) {
                    var val = manager.urlParams.get(this.key);
                    if (this.default instanceof Color) {
                        this.value = Color.fromUrl(val);
                    }
                    else {
                        if (typeof this.default === 'boolean') {
                            this.value = this.hasKey;
                        }
                        else {
                            this.value = val;
                        }
                    }
                }
                else {
                    if (this.default instanceof Color) {
                        this.value = this.default.clone();
                    }
                }
            }
            UrlParam.prototype.isDefaultValue = function () {
                if (typeof this.value == 'object') {
                    if (this.compareFn == null) {
                        throw new Error('comparer must be an callback for given type ' + typeof this.value);
                    }
                    return this.compareFn(this.value, this.default);
                }
                return this.value == this.default;
            };
            UrlParam.prototype.isSet = function () {
                return this.hasKey && !this.isDefaultValue();
            };
            UrlParam.prototype.getValue = function () {
                return this.value;
            };
            UrlParam.prototype.setValue = function (val) {
                this.value = val;
            };
            UrlParam.prototype.getDefault = function () {
                return this.default;
            };
            UrlParam.prototype.getCheckedValue = function () {
                if (this.isSet()) {
                    return this.getValue();
                }
                return this.getDefault();
            };
            UrlParam.prototype.getUrlValue = function () {
                var s = this.key;
                if (this.value instanceof Color) {
                    s += '=' + this.value.toUrl();
                }
                else if (typeof this.value == 'string') {
                    s += '=' + this.getValue();
                }
                return s;
            };
            return UrlParam;
        }());
        Internal.UrlParam = UrlParam;
    })(Internal = Freakylay.Internal || (Freakylay.Internal = {}));
})(Freakylay || (Freakylay = {}));
//# sourceMappingURL=Freakylay.min.js.map